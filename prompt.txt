Estructura básica de los reporte
-----------------------------------
Ok, antes de pasarte parte del código de mi proyecto involucrado para generar estos reportes te voy a explicar lo que requiero.
Son una serie de reportes, cada uno distinto del otro, son reportes que por lo general son voluminosos en cuanto a la cantidad de registros que pueden conformarlos porque hay data de mucho tiempo. Los reportes deben tener una estructura básica: Hoja (tamaño, orientación y márgenes), encabezado (header), cuerpo (body) y pie de página (footer).

Hoja: 
- Poder definir el tamaño de la hoja (A4, Letter, etc)
- Poder definir la orientación (vertical, horizontal)
- Poder definir los márgenes (superior, inferior, izquierdo y derecho)

Encabezado: 
Debe estar en la parte superior de la hoja y abarcar todo el ancho respetando los márgenes superior, izquierdo y derecho.
Debe estar seccionado en encabezado superior (header-top) y encabezado inferior (header-bottom) ambos del mismo ancho.
- Encabezado superior: debe tener una altura fija y dividido en dos secciones, la sección izquierda (header-top-left) de un ancho entre el 25% y 30% del ancho del encabezado en el que se renderizará el logotipo centrado verticalmente y justificado o alineado a la izquierda y la sección derecha (header-top-right) cuyo ancho es el resto del espacio en el que se renderizará el título del reporte justificado o alineado a la derecha.
- Encabezado inferior: este de contar con 2 secciones, la sección izquierda (header-bottom-left) y la sección derecha (header-bottom-right) ambas del mismo ancho pero la altura se pueda ajusta a la cantidad de líneas a renderizar dentro de cada una de las secciones, pero que crezcan hacia abajo al mismo novel ambas, si una teine más información se debe ajustar a ese tamaño y la otra igualmente para que se mantengan univormes en el tamaño vertical. La sección izquierda la informacióndebe estar justificada a la izquierda y la sección derecha debe justificar su contenido a la derecha.

El cuerpo: 
Es para renderizar la información que se obtiene de la consulta y que en algunos casa hay que estructurar los dato, agruparlos, sub totalizar y totalizar. Las columnas para enderizar estos datos deben contemplar el desbordamiento de información, que si no cabe en la columna que esta siga en la siguiente línea y empujar hacia abajo los datos de la siguiente línea sin descuadrar el reporte.

Pie de página: 
El pie de página (footer) debe tener tres secciones:
- Sección izquierda (footer-left) la cual renderizará el literal "M.A.A.Soft" en cursiva justificado a la izquierda.
- Sección central (footer-center) la cual renderizará el número de página, de ser posible "Página xxx/xxx" o "- xxx/xxx -" si no es posible de esa forma entonces solo en número de página.
- Sección derecha (fotter-right) la cual renderizará la fecha y hora actual del reporte en formato dd/mm/aaaa HH:mm

------------------------------------------------


Tengo esta vista

Vista genérica:
# neumatic\apps\informes\views\report_views_generics.py

import uuid
from django.views.generic import FormView
from django.http import HttpResponseRedirect, JsonResponse
from django.urls import reverse
from django.template.loader import render_to_string

#-- Recursos necesarios para proteger las rutas.
from django.utils.decorators import method_decorator
from django.contrib.auth.decorators import login_required
from utils.utils import serializar_datos

# -- Vistas Genéricas Basada en Clases -----------------------------------------------
@method_decorator(login_required, name='dispatch')
class InformeFormView(FormView):
	"""
	Clase base para informes.
	Se encarga de:
	  - Validar el formulario.
	  - Ejecutar la consulta mediante obtener_queryset().
	  - Obtener el contexto final para el reporte mediante obtener_contexto_reporte().
	  - Procesar la salida según el parámetro 'tipo_salida'.
	Las vistas hijas deberán implementar, al menos, obtener_queryset()
	y, en caso de necesitar transformación de datos, obtener_contexto_reporte().
	"""
	
	def get(self, request, *args, **kwargs):
		self.object = None
		form = self.get_form()
		if request.GET and any(value for key, value in request.GET.items() if value):
			if form.is_valid():
				tipo_salida = request.GET.get("tipo_salida")
				#-- Se ejecuta la consulta a la Base de Datos.
				queryset = self.obtener_queryset(form.cleaned_data)
				#-- Obtiene el contexto del reporte; por defecto, puede ser simplemente el queryset.
				contexto_reporte = self.obtener_contexto_reporte(queryset, form.cleaned_data)
				#-- Procesa la salida.
				return self.procesar_reporte(contexto_reporte, tipo_salida)
			else:
				return self.form_invalid(form)
		
		context_data = self.get_context_data(form=form)
		return self.render_to_response(context_data)
	
	def get_form_kwargs(self):
		kwargs = super().get_form_kwargs()
		#-- Sólo asignar data si la querystring contiene datos.
		if len(self.request.GET) > 0:
			kwargs['data'] = self.request.GET
		return kwargs	
	
	def form_invalid(self, form):
		context = self.get_context_data(form=form)
		context["data_has_errors"] = True
		if self.request.headers.get("X-Requested-With") == "XMLHttpRequest":
			#-- Renderizar el modal con los errores de validación y enviado en la respuesta JSON.
			html = render_to_string("informes/modal_errors.html", context, request=self.request)
			return JsonResponse({"success": False, "html": html})
		else:
			return super().render_to_response(context)
	
	def procesar_reporte(self, contexto_reporte, tipo_salida):
		"""
		Una vez validado el formulario, genera un token, guarda el contexto en la sesión y
		devuelve un JSON con la URL de salida (para pantalla o PDF).
		"""
		
		#-- Limpiar posibles reportes previos en la sesión.
		for key in list(self.request.session.keys()):
			if key.startswith("reporte_"):  #-- Opcional: prefijo para identificar tokens de reportes.
				del self.request.session[key]
		
		token = f"reporte_{uuid.uuid4()}"  #-- Agregar prefijo para fácil identificación.
		self.request.session[token] = serializar_datos(contexto_reporte)
		
		if tipo_salida == "pantalla":
			url = reverse(self.config.url_pantalla) + f"?token={token}"
		elif tipo_salida == "pdf_preliminar":
			url = reverse(self.config.url_pdf) + f"?token={token}"
		
		elif tipo_salida == "excel_preliminar":
			url = reverse(self.config.url_excel) + f"?token={token}"
		elif tipo_salida == "csv_preliminar":
			url = reverse(self.config.url_csv) + f"?token={token}"		
		
		else:
			url = reverse(self.config.url_pantalla) + f"?token={token}"
		
		if self.request.headers.get("X-Requested-With") == "XMLHttpRequest":
			return JsonResponse({"success": True, "url": url})
		else:
			return HttpResponseRedirect(url)
	
	def obtener_queryset(self, cleaned_data):
		"""
		Debe devolver el queryset filtrado según los datos del formulario.
		DEBE implementarse en la vista hija.
		"""
		raise NotImplementedError("Debe implementarse el método obtener_queryset.")
		
	def obtener_contexto_reporte(self, queryset, cleaned_data):
		"""
		Retorna el contexto que se pasará al template para renderizar el reporte.
		Por defecto, se retorna un contexto con los datos tal cual:
		  {
			 "objetos": queryset
		  }
		Si el listado requiere agrupar, subtotalizar o totalizar, la vista hija
		debe sobreescribir este método.
		"""
		return {"objetos": queryset}

Vista específica o vista hija:
# neumatic\apps\informes\views\saldosclientes_list_views.py

from django.urls import reverse_lazy
from django.shortcuts import render
from django.http import HttpResponse
# from decimal import Decimal
# from datetime import date, datetime
from datetime import datetime
from django.template.loader import render_to_string
from weasyprint import HTML
from django.templatetags.static import static
# from django.forms.models import model_to_dict

#-- Recursos necesarios para generar el pdf.
from io import BytesIO
from reportlab.lib.pagesizes import A4, landscape
from reportlab.lib.units import inch
from reportlab.lib import colors
from reportlab.platypus import BaseDocTemplate, Frame, PageTemplate, Paragraph, Spacer, Table, TableStyle
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.pdfgen import canvas
from reportlab.lib.enums import TA_LEFT, TA_RIGHT

from .report_views_generics import *
from apps.informes.models import VLSaldosClientes
from ..forms.buscador_saldosclientes_forms import BuscadorSaldosClientesForm
from utils.utils import deserializar_datos
from apps.maestros.templatetags.custom_tags import formato_es_ar
from utils.helpers.export_helpers import ExportHelper



class ConfigViews:
	
	#-- Título del reporte.
	report_title = "Saldos de Clientes"
	
	#-- Modelo.
	model = VLSaldosClientes
	
	#-- Formulario asociado al modelo.
	form_class = BuscadorSaldosClientesForm
	
	#-- Aplicación asociada al modelo.
	app_label = "informes"
	
	#-- Nombre del modelo en minúsculas.
	model_string = model.__name__.lower()
	
	# Vistas del CRUD del modelo
	list_view_name = f"{model_string}_list"  # <== vlventacompro_list
	
	#-- Plantilla base.
	template_list = f'{app_label}/maestro_informe.html'
	
	#-- Vista del home del proyecto.
	home_view_name = "home"
	
	#-- Nombre de la url.
	success_url = reverse_lazy(list_view_name)
	
	#-- Archivo JavaScript específico.
	js_file = "js/filtros_saldos_clientes.js"
	
	# #-- URL de la vista que genera el .zip con los informes.
	# url_zip = f"{model_string}_informe_generado"
	
	#-- URL de la vista que genera la salida a pantalla.
	url_pantalla = f"{model_string}_vista_pantalla"
	
	#-- URL de la vista que genera el .pdf.
	url_pdf = f"{model_string}_vista_pdf"
	
	#-- URL de la vista que genera el Excel.
	url_excel = f"{model_string}_vista_excel"
	
	#-- URL de la vista que genera el CSV.
	url_csv = f"{model_string}_vista_csv"
	
	#-- Plantilla Vista Preliminar Pantalla.
	reporte_pantalla = f"informes/reportes/{model_string}_list.html"
	
	#-- Plantilla Vista Preliminar PDF.
	reporte_pdf = f"informes/reportes/{model_string}_pdf.html"


class VLSaldosClientesInformeView(InformeFormView):
	config = ConfigViews  #-- Ahora la configuración estará disponible en self.config.
	form_class = ConfigViews.form_class
	template_name = ConfigViews.template_list
	success_url = ConfigViews.success_url
	
	extra_context = {
		"master_title": f'Informes - {ConfigViews.model._meta.verbose_name_plural}',
		"home_view_name": ConfigViews.home_view_name,
		# "list_view_name": ConfigViews.list_view_name,
		# "table_headers": DataViewList.table_headers,
		# "table_data": DataViewList.table_data,
		"buscador_template": f"{ConfigViews.app_label}/buscador_{ConfigViews.model_string}.html",
		"js_file": ConfigViews.js_file,
		"url_pantalla": ConfigViews.url_pantalla,
		"url_pdf": ConfigViews.url_pdf,
	}
	
	def obtener_queryset(self, cleaned_data):
		fecha_hasta = cleaned_data.get('fecha_hasta')
		vendedor = cleaned_data.get('vendedor')
		
		if vendedor:
			queryset = VLSaldosClientes.objects.obtener_saldos_clientes(fecha_hasta, vendedor.id_vendedor)
		else:
			queryset = VLSaldosClientes.objects.obtener_saldos_clientes(fecha_hasta)
		
		return queryset
	
	def obtener_contexto_reporte(self, queryset, cleaned_data):
		"""
		Aquí se estructura el contexto para el reporte, agrupando los comprobantes,
		calculando subtotales y totales generales, tal como se requiere para el listado.
		"""
		
		fecha_hasta = cleaned_data.get('fecha_hasta')
		vendedor = cleaned_data.get('vendedor')
		
		param = {
			"Hasta": fecha_hasta.strftime("%d/%m/%Y"),
		}
		
		if vendedor:
			param["Clientes del vendedor"] = vendedor.nombre_vendedor
		else:
			param["Listado"] = "Todos los Clientes"
			
		
		fecha_hora_reporte = datetime.now().strftime("%d/%m/%Y %H:%M:%S")		
		
		dominio = f"http://{self.request.get_host()}"
		
		#-- Convertir cada objeto del queryset a un diccionario.
		# objetos_serializables = [model_to_dict(item) for item in queryset]
		objetos_serializables = [raw_to_dict(item) for item in queryset]
		
		#-- Calcular el saldo total.
		saldo_total = sum(item.get('saldo', 0) for item in objetos_serializables)
		
		#-- Se retorna un contexto que será consumido tanto para la vista en pantalla como para la generación del PDF.
		return {
			"objetos": objetos_serializables,
			'saldo_total': saldo_total,
			"parametros": param,
			'fecha_hora_reporte': fecha_hora_reporte,
			'titulo': ConfigViews.report_title,
			'logo_url': f"{dominio}{static('img/logo_01.png')}",
			'css_url': f"{dominio}{static('css/reportes.css')}",
			'css_url_new': f"{dominio}{static('css/reportes_new.css')}",
			'header_bottom_left': "",
		}
	
	def get_context_data(self, **kwargs):
		context = super().get_context_data(**kwargs)
		form = kwargs.get("form") or self.get_form()
		
		context["form"] = form
		if form.errors:
			context["data_has_errors"] = True
		return context


def raw_to_dict(instance):
	"""Convierte una instancia de una consulta raw a un diccionario, eliminando claves internas."""
	data = instance.__dict__.copy()
	data.pop('_state', None)
	return data


def vlsaldosclientes_vista_pantalla(request):
	#-- Obtener el token de la querystring.
	token = request.GET.get("token")
	if not token:
		return HttpResponse("Token no proporcionado", status=400)
	
	#-- Obtener el contexto(datos) previamente guardados en la sesión.
	# contexto_reporte = request.session.pop(token, None)
	contexto_reporte = deserializar_datos(request.session.pop(token, None))
	
	if not contexto_reporte:
		return HttpResponse("Contexto no encontrado o expirado", status=400)
	
	#-- Generar el listado a pantalla.
	return render(request, ConfigViews.reporte_pantalla, contexto_reporte)
	# return render(request, "informes/reportes/mercaderiaporcliente_list.html", contexto_reporte)

#-- Vista para generar el PDF con WeasyPrint. -----------------------------------
# def vlsaldosclientes_vista_pdf_prop(request):
# 	#-- Obtener el token de la querystring.
# 	token = request.GET.get("token")
# 	
# 	if not token:
# 		return HttpResponse("Token no proporcionado", status=400)
# 	
# 	#-- Obtener el contexto(datos) previamente guardados en la sesión.
# 	# contexto_reporte = deserializar_datos(request.session.pop(token, None))
# 	contexto_reporte = deserializar_datos(request.session.get(token, None))
# 	
# 	if not contexto_reporte:
# 		return HttpResponse("Contexto no encontrado o expirado", status=400)
# 	
# 	#-- Preparar la respuesta HTTP.
# 	# html_string = render_to_string("informes/reportes/mercaderiaporcliente_pdf.html", contexto_reporte, request=request)
# 	html_string = render_to_string(ConfigViews.reporte_pdf, contexto_reporte, request=request)
# 	pdf_file = HTML(string=html_string, base_url=request.build_absolute_uri()).write_pdf()
# 
# 	response = HttpResponse(pdf_file, content_type="application/pdf")
# 	response["Content-Disposition"] = f'inline; filename="informe_{ConfigViews.model_string}.pdf"'
# 	
# 	return response
#--------------------------------------------------------------------------------

#-- Vista para generar el PDF con ReportLab. ------------------------------------
def vlsaldosclientes_vista_pdf(request):
	#-- Obtener el token de la querystring.
	token = request.GET.get("token")
	
	if not token:
		return HttpResponse("Token no proporcionado", status=400)
	
	#-- Obtener el contexto(datos) previamente guardados en la sesión.
	# contexto_reporte = deserializar_datos(request.session.pop(token, None))
	contexto_reporte = deserializar_datos(request.session.get(token, None))
	
	if not contexto_reporte:
		return HttpResponse("Contexto no encontrado o expirado", status=400)
	
	#-- Generar el PDF usando ReportLab
	pdf_file = generar_pdf_saldos_clientes(contexto_reporte, request)
	
	#-- Preparar la respuesta HTTP.
	response = HttpResponse(pdf_file, content_type="application/pdf")
	response["Content-Disposition"] = f'inline; filename="informe_{ConfigViews.model_string}.pdf"'
	
	return response


#-- Para generar el PDF. ----------------------------------------------------------------------------------
#-- Canvas personalizado para numerar páginas "Página xxx / yyy".
class NumberedCanvas(canvas.Canvas):
	def __init__(self, *args, **kwargs):
		super(NumberedCanvas, self).__init__(*args, **kwargs)
		self._saved_page_states = []
	def showPage(self):
		self._saved_page_states.append(dict(self.__dict__))
		self._startPage()
	def save(self):
		num_pages = len(self._saved_page_states)
		for state in self._saved_page_states:
			self.__dict__.update(state)
			self.draw_page_number(num_pages)
			super(NumberedCanvas, self).showPage()
		super(NumberedCanvas, self).save()
	def draw_page_number(self, page_count):
		page_text = "Página %d / %d" % (self._pageNumber, page_count)
		self.setFont("Helvetica", 9)
		self.drawCentredString(self._pagesize[0]/2.0, 15, page_text)

#-- Función para dibujar header y footer en cada página.
def header_footer(canvas_obj, doc):
	canvas_obj.saveState()
	width, height = doc.pagesize
	# styles = getSampleStyleSheet()
	
	# --- Header ---
	header_top_height = 50
	# Sección superior izquierda: logotipo
	logo_path = doc.contexto_reporte.get("logo_url", "")  # Asumiendo que el contexto está en doc.contexto_reporte
	logo_area_width = (width - doc.leftMargin - doc.rightMargin) * 0.25
	logo_height = 30
	logo_x = doc.leftMargin - 30
	logo_y = height - header_top_height + (header_top_height - logo_height) / 2
	try:
		canvas_obj.drawImage(logo_path, logo_x, logo_y, width=logo_area_width,
							height=logo_height, preserveAspectRatio=True, mask='auto')
	except Exception:
		canvas_obj.setFont("Helvetica", 10)
		canvas_obj.drawString(logo_x, logo_y, "[Logo]")
	
	# Sección superior derecha: título
	titulo = doc.contexto_reporte.get("titulo", "Reporte")
	font_name = "Helvetica-BoldOblique"
	font_size = 12
	available_width = width - doc.leftMargin - doc.rightMargin
	text_width = canvas_obj.stringWidth(titulo, font_name, font_size)
	
	# Reducir el tamaño de fuente si el texto excede el ancho disponible (hasta un tamaño mínimo, por ejemplo, 6)
	while text_width > available_width and font_size > 6:
		font_size -= 0.5
		text_width = canvas_obj.stringWidth(titulo, font_name, font_size)
	
	canvas_obj.setFont(font_name, font_size)
	canvas_obj.drawRightString(width - doc.rightMargin, (height - header_top_height/2)-10, titulo)

	# Mientras el texto exceda el ancho disponible, reducimos el tamaño de fuente
	while text_width > available_width and font_size > 6:
		font_size -= 0.5
		text_width = canvas_obj.stringWidth(titulo, font_name, font_size)

	canvas_obj.setFont(font_name, font_size)
	canvas_obj.drawRightString(width - doc.rightMargin, (height - header_top_height/2)-10, titulo)	
	
	# --- Header-bottom ---
	#-- Línea inferior de header-top (inicio de header-bottom).
	line_y_start = height - header_top_height  
	canvas_obj.setLineWidth(1)
	canvas_obj.setStrokeColor(colors.black)
	canvas_obj.line(doc.leftMargin, line_y_start, width - doc.rightMargin, line_y_start)	
	# ----------------------------------------------------------------------------------
	header_bottom_text_left = doc.contexto_reporte.get("header_bottom_left", "")
	
	# Contenido derecho: se construye a partir del diccionario 'parametros'
	parametros = doc.contexto_reporte.get("parametros", {})
	lines = []
	for key, value in parametros.items():
		lines.append(f"<b>{key}:</b> {value}")
	header_bottom_text_right = "<br/>".join(lines)
	
	# Definir estilos para cada sección
	p_style_left = ParagraphStyle('headerBottomLeft', fontSize=9, leading=12, alignment=TA_LEFT)
	p_style_right = ParagraphStyle('headerBottomRight', fontSize=9, leading=12, alignment=TA_RIGHT)
	
	p_left = Paragraph(header_bottom_text_left, p_style_left)
	p_right = Paragraph(header_bottom_text_right, p_style_right)
	
	available_width = (width - doc.leftMargin - doc.rightMargin) / 2.0
	# Llamar wrap() para cada Paragraph
	left_w, left_h = p_left.wrap(available_width, 100)
	right_w, right_h = p_right.wrap(available_width, 100)
	header_bottom_height = max(left_h, right_h)
	header_bottom_y = height - header_top_height - header_bottom_height
	
	p_left.drawOn(canvas_obj, doc.leftMargin, header_bottom_y)
	p_right.drawOn(canvas_obj, doc.leftMargin + available_width, header_bottom_y)
	
	#-- Dibujar línea horizontal al final del header-bottom.
	line_y_end = header_bottom_y
	canvas_obj.line(doc.leftMargin, line_y_end, width - doc.rightMargin, line_y_end)	
	# ----------------------------------------------------------------------------------
	
	# --- Footer ---
	footer_y = 15
	
	# Dibujar línea decorativa justo encima del footer:
	line_y = footer_y + 12  # 12 puntos por encima del footer
	canvas_obj.setLineWidth(1)
	canvas_obj.setStrokeColor(colors.black)
	canvas_obj.line(doc.leftMargin, line_y, width - doc.rightMargin, line_y)

	canvas_obj.setFont("Helvetica-Oblique", 9)
	canvas_obj.drawString(doc.leftMargin, footer_y, "M.A.A.Soft")
	now_str = datetime.now().strftime("%d/%m/%Y %H:%M")
	canvas_obj.setFont("Helvetica", 9)
	canvas_obj.drawRightString(width - doc.rightMargin, footer_y, now_str)
	
	canvas_obj.restoreState()

def generar_pdf_saldos_clientes(contexto_reporte, request):
	"""
	Recibe el contexto del reporte y retorna un PDF generado con ReportLab.
	"""
	buffer = BytesIO()
	
	#-- Configuración del documento: tamaño, márgenes.
	doc = BaseDocTemplate(
		buffer,
		# pagesize=A4,  #-- Vertical, ancho máximo 595.
		pagesize=landscape(A4),   #-- Horizontal, ancho máximo 842.
		leftMargin=10,
		rightMargin=10,
		topMargin=0,
		bottomMargin=40
	)
	
	#-- Definir el Frame para el cuerpo (ajustando la altura restando espacio para header/footer).
	frame = Frame(
		doc.leftMargin,
		doc.bottomMargin,
		doc.width,
		doc.height - 80,  #-- Ajustar según lo usado en header y footer.
		id="body"
	)
	
	#-- PageTemplate con función header_footer.
	template = PageTemplate(id="reportTemplate", frames=[frame], onPage=header_footer)
	doc.addPageTemplates([template])
	
	story = []
	styles = getSampleStyleSheet()
	
	#-- Estilo de párrafo.
	cell_style = ParagraphStyle(
		name="cellStyle",
		parent=styles["BodyText"],
		fontSize=6,
		leading=5.0,
		spaceBefore=0,
		spaceAfter=0,
		leftIndent=0,
		rightIndent=0,
		firstLineIndent=0,
	)
	
	#-- Construir datos de la tabla:
	header_data = [
		"Cliente", "Nombre", "Domicilio", "C.P.", "Localidad",
		"Teléfono", "Saldo", "1er. Comp. Pend.", "Último Pago", "Sub Cuenta"
	]
	table_data = [header_data]
	for obj in contexto_reporte.get("objetos", []):
		primer_fact = obj.get("primer_fact_impaga")
		if primer_fact:
			if isinstance(primer_fact, str):
				primer_fact = datetime.strptime(primer_fact, "%Y-%m-%d").strftime("%d/%m/%Y")
			else:
				primer_fact = primer_fact.strftime("%d/%m/%Y")
		else:
			primer_fact = ""
		ultimo_pago = obj.get("ultimo_pago")
		if ultimo_pago:
			if isinstance(ultimo_pago, str):
				try:
					ultimo_pago = datetime.strptime(ultimo_pago, "%Y-%m-%d").strftime("%d/%m/%Y")
				except Exception:
					ultimo_pago = ultimo_pago
			else:
				ultimo_pago = ultimo_pago.strftime("%d/%m/%Y")
		else:
			ultimo_pago = ""
		row = [
			obj.get("id_cliente_id", ""),
			Paragraph(obj.get("nombre_cliente", ""), cell_style),
			Paragraph(obj.get("domicilio_cliente", ""), cell_style),
			obj.get("codigo_postal", ""),
			Paragraph(obj.get("nombre_localidad", ""), cell_style),
			obj.get("telefono_cliente", ""),
			formato_es_ar(obj.get("saldo", 0)),
			primer_fact,
			ultimo_pago,
			obj.get("sub_cuenta", "")
		]
		table_data.append(row)
	
	#-- Agregar la fila del total.
	saldo_total = contexto_reporte.get("saldo_total", 0)
	total_row = [
		"", "", "", "", "",
		"Total Pendiente:", 
		formato_es_ar(saldo_total),
		"", "", ""
	]
	table_data.append(total_row)	
	
	#-- Crear la tabla y aplicar estilos.
	ancho_cols = [
		40,  # Cliente
		180, # Nombre
		180, # Domicilio
		30,  # C.P.
		100, # Localidad
		60,  # Telefono
		60,  # Saldo
		50,  # !er. Comp. Pend.
		50,  # Ultimo pago
		50   # Sub Cuenta
	]
	table = Table(table_data, colWidths=ancho_cols, repeatRows=1)
	table_style = TableStyle([
		('BACKGROUND', (0,0), (-1,0), colors.gray), # Color de fondo primera fila, Encabezados.
		
		# ('TEXTCOLOR', (0,0), (-1,0), colors.whitesmoke), # Color del texto desde la 2da. fila en adelante.
		('TEXTCOLOR', (0,0), (-1,0), colors.whitesmoke), # Color del texto desde la 2da. fila en adelante.
		
		# ('ALIGN', (0,0), (-1,-1), 'CENTER'),
		('ALIGN', (6,0), (6,-1), 'RIGHT'),
		('FONTNAME', (0,0), (-1,0), 'Helvetica-Bold'),
		
		('VALIGN', (0,0), (-1,-1), 'TOP'),  # Alinea verticalmente todas las celdas a la parte superior
		#('FONTSIZE', (0,0), (-1,0), 8), # Solo la primera fila (desde primera col, primera row hasta última col, primea row).
		('FONTSIZE', (0,0), (-1,-1), 6), # Solo la primera fila (desde primera col, primera row hasta última col, última row).
		
		('TOPPADDING', (0,1), (-1,1),2),
		('TOPPADDING', (0,2), (-1,-1), 0),
		('BOTTOMPADDING', (0,1), (-1,-1), 0),
		
		#-- Línea horizontal encima de la fila total.
		('LINEABOVE', (0, len(table_data)-1), (-1, len(table_data)-1), 0.5, colors.black),
		('FONTNAME', (0, len(table_data)-1), (-1, len(table_data)-1), 'Helvetica-Bold'),
		
		# ('GRID', (0,0), (-1,-1), 0.5, colors.black),
	])
	
	table.setStyle(table_style)
	
	story.append(table)
	
	doc.contexto_reporte = contexto_reporte
	doc.build(story, canvasmaker=NumberedCanvas)
	pdf = buffer.getvalue()
	buffer.close()
	return pdf


def vlsaldosclientes_vista_excel(request):
	# token = request.GET.get("token")
	# if not token:
	# 	return HttpResponse("Token no proporcionado", status=400)
	# 
	# contexto_reporte = deserializar_datos(request.session.get(token, None))
	# if not contexto_reporte:
	# 	return HttpResponse("Contexto no encontrado o expirado", status=400)
	
	
	# Primero, se valida el formulario para obtener los datos filtrados
	form = BuscadorSaldosClientesForm(data=request.GET)
	if not form.is_valid():
		return HttpResponse("Error en los parámetros", status=400)
	cleaned_data = form.cleaned_data
	
	print(f"{cleaned_data = }")
	
	# Instanciar la vista y obtener el queryset
	view_instance = VLSaldosClientesInformeView()  # O VLSaldosClientesInformeView_prop según convenga
	view_instance.request = request  # Asignar la request a la instancia
	queryset = view_instance.obtener_queryset(cleaned_data)
	
	print(list(queryset))
	
	# Asumiendo que ya tienes implementado export_to_excel en tu ExportHelper:
	
	header_data = {
		"id_cliente_id": (40, "Cliente"),
		"nombre_cliente": (180, "Nombre"),
		"domicilio_cliente": (180, "Domicilio"),
		"codigo_postal": (30, "C.P."),
		"nombre_localidad": (100, "Localidad"),
		"telefono_cliente": (60, "Teléfono"),
		"saldo": (60, "Saldo"),
		"primer_fact_impaga": (50, "1er. Comp. Pend."),
		"ultimo_pago": (50, "Último Pago"),
		"sub_cuenta": (50, "Sub Cuenta")
	}
	
	helper = ExportHelper(queryset=queryset,
						table_headers=header_data ,  # Los encabezados que corresponden
						report_title=ConfigViews.report_title)
	excel_data = helper.export_to_excel()
	
	response = HttpResponse(
		excel_data,
		content_type="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
	)
	# Inline permite visualizarlo en el navegador si el navegador lo soporta.
	response["Content-Disposition"] = 'inline; filename="informe.xlsx"'
	return response

Necesito generar un archivo excel en la vista vlsaldosclientes_vista_excel pero intento obtener el queryset y este me viene vacío porque el cleaned_data los parámetros están vacío en ese punto, cómo puedo obtener los datos en el queryset en ese método para poder generar el Excel?
Si necesitas que te pase el modelo y su manager con los que obtengo los datos de la base de datos o algún otro recurso, pídeme lo que necesites, por favor


==========================================================

Pero en esta parte del código que me sugieres:
    # Convertir de vuelta a objeto date si es necesario.
    if "fecha_hasta" in cleaned_data:
        try:
            # Suponiendo que usaste isoformat, puedes convertirlo con fromisoformat.
            cleaned_data["fecha_hasta"] = date.fromisoformat(cleaned_data["fecha_hasta"])
        except Exception:
            pass

Se está preguntando por un dato en específico (fecha_hasta), se podría generalizar esa funcionalidad para que determine el tipo de dato sin importar el nombre de este? es decir, ,para que pueda servir si paso algún otro u otros campos de tipo fecha.

