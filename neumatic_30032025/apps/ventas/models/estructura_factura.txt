class Factura(ModeloBaseGenerico):
	id_factura = models.AutoField(
		primary_key=True
	)
	id_orig = models.IntegerField(
		verbose_name="ID_ORIG",
		null=True,
		blank=True
	)	
	estatus_comprobante = models.BooleanField(
		verbose_name="Estatus",
		default=True,
		choices=ESTATUS_GEN
	)
	id_sucursal = models.ForeignKey(
		Sucursal,
		on_delete=models.PROTECT,
		verbose_name="Sucursal",
		null=True,
		blank=True
	)
 
	id_punto_venta = models.ForeignKey(
		PuntoVenta,
		on_delete=models.PROTECT,
		verbose_name="Punto de Venta",
		null=True,
		blank=True
	)
 
	jerarquia = models.CharField(
     	verbose_name="Jerarquía", 
      	max_length=1,
     	null=True, blank=True)
 
	id_comprobante_venta = models.ForeignKey(
		ComprobanteVenta,
		on_delete=models.PROTECT,
		verbose_name="Comprobante",
		null=True,
		blank=True
	)
	compro = models.CharField(
		verbose_name="Compro",
		max_length=3,
		null=True,
		blank=True
	) 
	letra_comprobante = models.CharField(
		verbose_name="Letra",
		max_length=1,
		null=True,
		blank=True
	)
	numero_comprobante = models.IntegerField(
		verbose_name="Número",
		null=True,
		blank=True
	)
	remito = models.CharField(
		verbose_name="Remito",
		max_length=15,
		null=True,
		blank=True
	)
	fecha_comprobante = models.DateField(
		verbose_name="Fecha Emisión",
		null=True,
		blank=True
	)
	id_cliente = models.ForeignKey(
		Cliente,
		on_delete=models.PROTECT,
		verbose_name="Cliente",
		null=True,
		blank=True
	)
 
	cuit = models.IntegerField(
		verbose_name="CUIT",
		null=True,
		blank=True
	)
 
	nombre_factura = models.CharField(
		verbose_name="Nombre",
		max_length=50,
		null=True,
		blank=True
	)
 
	domicilio_factura = models.CharField(
		verbose_name="Domicilio",
		max_length=50,
		null=True,
		blank=True
	)
 
	movil_factura = models.CharField("Móvil", max_length=15, null=True, blank=True)
	email_factura = models.EmailField("Email*", max_length=50, null=True, blank=True)
 
	condicion_comprobante = models.IntegerField(
		verbose_name="Condición de Venta",
		default=1,
		choices=CONDICION_VENTA
	)
 
	id_vendedor = models.ForeignKey(Vendedor, 
									on_delete=models.PROTECT,
									null=True, blank=True,
									verbose_name="Vendedor")
 
	gravado = models.DecimalField(
		verbose_name="Gravado",
		max_digits=14,
		decimal_places=2,
		null=True,
		blank=True,
		default=0.0
	)
	exento = models.DecimalField(
		verbose_name="Exento",
		max_digits=14,
		decimal_places=2,
		null=True,
		blank=True,
		default=0.0
	)
	iva = models.DecimalField(
		verbose_name="IVA",
		max_digits=14,
		decimal_places=2,
		null=True,
		blank=True,
		default=0.0
	)
	# Esta campo no es necesario pero se deja por tema de migración de datos y confirmar si se elimina o no.
	# acrece = models.DecimalField(
	# 	verbose_name="Acrece",
	# 	max_digits=14,
	# 	decimal_places=2,
	# 	null=True,
	# 	blank=True,
	# 	default=0.0
	# )
	# Esta campo no es necesario
	# impint = models.DecimalField(
	# 	verbose_name="Imp. Interno",
	# 	max_digits=14,
	# 	decimal_places=2,
	# 	null=True,
	# 	blank=True,
	# 	default=0.0
	# )
	percep_ib = models.DecimalField(
		verbose_name="Percepción IB",
		max_digits=14,
		decimal_places=2,
		null=True,
		blank=True,
		default=0.0
	)
	total = models.DecimalField(
		verbose_name="Total",
		max_digits=14,
		decimal_places=2,
		null=True,
		blank=True,
		default=0.0
	)
	entrega = models.DecimalField(
		verbose_name="Entrega",
		max_digits=14,
		decimal_places=2,
		null=True,
		blank=True,
		default=0.0
	)
	estado = models.CharField(
		verbose_name="Estado",
		max_length=1,
		null=True,
		blank=True
	)
	# Esta campo no es necesario
	# codimp = models.SmallIntegerField(
	# 	verbose_name="codimp",
	# 	null=True,
	# 	blank=True,
	# 	default=1
	# )
	marca = models.CharField(
		verbose_name="Marca",
		max_length=1,
		null=True,
		blank=True
	)
	# id_usuario = models.ForeignKey(
	# 	User,
	# 	on_delete=models.PROTECT,
	# 	verbose_name="Usuario",
	# 	null=True,
	# 	blank=True		
	# )
	# Esta campo no es necesario
	# comision = models.CharField(
	# 	verbose_name="Comisión",
	# 	max_length=1,
	# 	null=True,
	# 	blank=True
	# )
	# Esta campo no es necesario
	# codcomis = models.SmallIntegerField(
	# 	verbose_name="codcomis",
	# 	null=True,
	# 	blank=True,
	# 	default=0
	# )
	fecha_pago = models.DateField(
		verbose_name="Fecha Pago",
		null=True,
		blank=True
	)
	# Esta campo no es necesario
	# nombre = models.CharField(
	# 	verbose_name="Nombre",
	# 	max_length=30,
	# 	null=True,
	# 	blank=True
	# )
	# Esta campo no es necesario
	# id_tipo_iva = models.ForeignKey(
	# 	TipoIva,
	# 	on_delete=models.PROTECT,
	# 	verbose_name="Topo IVA",
	# 	null=True,
	# 	blank=True
	# )
	no_estadist = models.BooleanField(
		verbose_name="No estadist.",
		null=True,
		blank=True
	)
	# Esta campo no es necesario
	# usuario = models.CharField(
	# 	verbose_name="Nombre Usuario",
	# 	max_length=15,
	# 	null=True,
	# 	blank=True
	# )
	suc_imp = models.SmallIntegerField(
		verbose_name="sucimp",
		null=True,
		blank=True
	)
	cae = models.IntegerField(
		verbose_name="CAE",
		null=True,
		blank=True,
		default=0
	)
	cae_vto = models.DateField(
		verbose_name="Vcto. CAE",
		null=True,
		blank=True
	)
	observa_comprobante = models.CharField(
		verbose_name="Observaciones",
		max_length=30,
		null=True,
		blank=True
	)
	stock_clie = models.BooleanField(
		verbose_name="stockclie",
		null=True,
		blank=True
	)
	id_deposito = models.ForeignKey(
		ProductoDeposito,
		on_delete=models.PROTECT,
		verbose_name="Depósito",
		null=True,
		blank=True
	)
	promo = models.BooleanField(
		verbose_name="Promo",
		null=True,
		blank=True
	)
	
	def __str__(self):
		numero = str(self.numero_comprobante).strip().zfill(12)
		return f"{self.id_comprobante_venta.codigo_comprobante_venta} {self.letra_comprobante} {numero[:4]}-{numero[4:]}"
	
	
	class Meta:
		db_table = "factura"
		verbose_name = ('Factura')
		verbose_name_plural = ('Facturas')
		# ordering = ['id_factura']


class DetalleFactura(ModeloBaseGenerico):
	id_detalle_factura = models.AutoField(
		primary_key=True
	)
	id_factura = models.ForeignKey(
		Factura,
		on_delete=models.CASCADE,
		verbose_name="Factura",
		null=True,
		blank=True
	)
	id_producto = models.ForeignKey(
		Producto,
		on_delete=models.PROTECT,
		verbose_name="Producto",
		null=True,
		blank=True
	)
	codigo = models.IntegerField(
		verbose_name="Cód. Producto",
		null=True,
		blank=True
	)
 
	producto_venta = models.CharField(
     	"Nombre producto", 
      	max_length=50,
		null=True,
		blank=True
    )
 
	cantidad = models.DecimalField(
		verbose_name="Cantidad",
		max_digits=7,
		decimal_places=2,
		null=True,
		blank=True
	)
	costo = models.DecimalField(
		verbose_name="Costo",
		max_digits=12,
		decimal_places=2,
		null=True,
		blank=True
	)
	precio_lista = models.DecimalField(
		verbose_name="Precio",
		max_digits=12,
		decimal_places=2,
		null=True,
		blank=True
	)
	precio = models.DecimalField(
		verbose_name="Precio",
		max_digits=12,
		decimal_places=2,
		null=True,
		blank=True
	)
	descuento = models.DecimalField(
		verbose_name="Descuento(%)",
		max_digits=6,
		decimal_places=2,
		null=True,
		blank=True
	)
	desc_vendedor = models.DecimalField(
		verbose_name="Descuento(%)",
		max_digits=6,
		decimal_places=2,
		null=True,
		blank=True
	)
	gravado = models.DecimalField(
		verbose_name="Gravado",
		max_digits=14,
		decimal_places=2,
		null=True,
		blank=True
	)
	alic_iva = models.DecimalField(
		verbose_name="Alíc. IVA(%)",
		max_digits=6,
		decimal_places=2,
		null=True,
		blank=True
	)
	iva = models.DecimalField(
		verbose_name="IVA",
		max_digits=14,
		decimal_places=2,
		null=True,
		blank=True
	)
	total = models.DecimalField(
		verbose_name="Total",
		max_digits=14,
		decimal_places=2,
		null=True,
		blank=True
	)
	reventa = models.CharField(
		verbose_name="Reventa",
		max_length=1,
		null=True,
		blank=True
	)
	stock = models.DecimalField(
		verbose_name="Stock",
		max_digits=10,
		decimal_places=2,
		null=True,
		blank=True
	)
	act_stock = models.BooleanField(
		verbose_name="Act. Stock",
		null=True,
		blank=True
	)
	id_operario = models.ForeignKey(
		Operario,
		on_delete=models.PROTECT,
		null=True,
		blank=True
	)
	
	def __str__(self):
		return self.id_detalle_factura
	
	
	class Meta:
		db_table = "detalle_factura"
		verbose_name = ('Detalle Factura')
		verbose_name_plural = ('Detalles Factura')
		# ordering = ['id_detalle_factura']


class SerialFactura(ModeloBaseGenerico):
	id_serial_factura = models.AutoField(
		primary_key=True
	)
	id_factura = models.ForeignKey(
		Factura,
		on_delete=models.CASCADE,
		verbose_name="Factura",
		null=True,
		blank=True
	)
	producto_serial = models.CharField(
     	"Serial producto", 
      	max_length=50,
		null=True,
		blank=True
    )

	
	def __str__(self):
		return self.producto_serial
	
	
	class Meta:
		db_table = "serial_factura"
		verbose_name = ('Detalle Serial')
		verbose_name_plural = ('Detalles Serial')


class Cliente(ModeloBaseGenerico):
	id_cliente = models.AutoField(primary_key=True)
	estatus_cliente = models.BooleanField("Estatus*", default=True, 
										  choices=ESTATUS_GEN)
	codigo_cliente = models.IntegerField("Código", null=True, blank=True)
	nombre_cliente = models.CharField("Nombre Cliente*", max_length=50)
	domicilio_cliente = models.CharField("Domicilio Cliente*", 
										 max_length=50)
	codigo_postal = models.CharField("Código Postal*", max_length=5,
                                  null=True, blank=True)
	id_provincia = models.ForeignKey(Provincia, on_delete=models.PROTECT, 
									verbose_name="Provincia*",
          							null=True, blank=True)
	id_localidad = models.ForeignKey(Localidad, on_delete=models.PROTECT,
									verbose_name="Localidad*",
         							null=True, blank=True)
	tipo_persona = models.CharField("Tipo de Persona*", max_length=1,
									default="F", 
									choices=TIPO_PERSONA)
	id_tipo_iva = models.ForeignKey(TipoIva, on_delete=models.PROTECT,
									verbose_name="Tipo de Iva*")
	id_tipo_documento_identidad = models.ForeignKey(TipoDocumentoIdentidad, 
										on_delete=models.PROTECT, 
										verbose_name="Tipo Doc. Identidad*")
	cuit = models.IntegerField("CUIT", null=True, blank=True)
	condicion_venta = models.IntegerField("Condición Venta*", 
										  default=True,
										  choices=CONDICION_VENTA)
	telefono_cliente = models.CharField("Teléfono*", max_length=15)
	fax_cliente = models.CharField("Fax", max_length=15, null=True, blank=True)
	movil_cliente = models.CharField("Móvil", max_length=15, null=True, blank=True)
	email_cliente = models.EmailField("Email*", max_length=50)
	email2_cliente = models.EmailField("Email 2", max_length=50, 
									null=True, blank=True)
	transporte_cliente = models.CharField("Transporte", max_length=50, 
									   null=True, blank=True)
	id_vendedor = models.ForeignKey(Vendedor, 
									on_delete=models.PROTECT,
									null=True, blank=True,
									verbose_name="Vendedor")
	fecha_nacimiento = models.DateField("Fecha Nacimiento", 
									 null=True, blank=True)
	fecha_alta = models.DateField("Fecha Alta", default=date.today,
                               null=True, blank=True)
	sexo = models.CharField("Sexo*", max_length=1, 
							default="M", 
							choices=SEXO)
	id_actividad = models.ForeignKey(Actividad, 
									on_delete=models.PROTECT,
									null=True, blank=True,
									verbose_name="Actividad*")
	id_sucursal = models.ForeignKey(Sucursal, 
									on_delete=models.CASCADE,
									null=True, blank=True,
									verbose_name="Sucursal*")
	id_percepcion_ib = models.ForeignKey(TipoPercepcionIb, 
										on_delete=models.PROTECT,
										null=True, blank=True,
										verbose_name="Percepción IB*",)
	numero_ib = models.CharField("Número IB", max_length=15, null=True, blank=True)
	vip = models.BooleanField("Cliente VIP*", 
							  default=False,
							  choices=CLIENTE_VIP)
	mayorista = models.BooleanField("Mayorista*", 
									default=False,
									choices=CLIENTE_MAYORISTA)
	sub_cuenta = models.IntegerField("Código", null=True, blank=True)
	observaciones_cliente = models.TextField("Observaciones", 
											 blank=True, null=True)
	black_list = models.BooleanField("Black List", default=False, 
										  choices=BLACK_LIST)
	black_list_motivo = models.CharField("Motivo Black List", max_length=50, 
										   null=True, blank=True)
	black_list_usuario = models.CharField("Usuario Black List", 
										  max_length=20, null=True, blank=True)
	fecha_baja = models.DateField("Fecha de Baja", null=True, blank=True)
	
	def __str__(self):
		return self.nombre_cliente
	
	def clean(self):
		super().clean()
		
		# Diccionario contenedor de errores
		errors = {}
		
		# Convertir a string los valores de los campos previo a la validación
		telefono_str = str(self.telefono_cliente) if self.telefono_cliente else ''
		movil_cliente_str = str(self.movil_cliente) if self.movil_cliente else ''
		sub_cuenta_str = str(self.sub_cuenta) if self.sub_cuenta else ''
		
		try:
			validar_cuit(self.cuit)
		except ValidationError as e:
			# Agrego el error al dicciobario errors
			errors['cuit'] = e.messages
		
		if not re.match(r'^\+?\d[\d ]{0,14}$', telefono_str):
			errors.update({'telefono_cliente': 'Debe indicar sólo dígitos numéricos positivos, \
       			mínimo 1 y máximo 15, el signo + y espacios.'})
		
		if movil_cliente_str and not re.match(r'^\+?\d[\d ]{0,14}$', movil_cliente_str):
			errors.update({'movil_cliente': 'Debe indicar sólo dígitos numéricos positivos, mínimo 1 y máximo 15, el signo +, espacios o vacío.'})
		
		if sub_cuenta_str and not re.match(r'^\d{0,6}$', sub_cuenta_str):
			errors.update({'sub_cuenta': 'Debe indicar sólo dígitos numéricos positivos, mínimo 1 y máximo 6.'})
		elif sub_cuenta_str and not buscar_cliente_id(self.sub_cuenta):
			errors.update({'sub_cuenta': 'No existe un cliente con la Sub Cuenta indicada.'})
		
		if errors:
			# Lanza el conjunto de excepciones
			raise ValidationError(errors)
	
	
	class Meta:
		db_table = 'cliente'
		verbose_name = ('Cliente')
		verbose_name_plural = ('Clientes')
		ordering = ['nombre_cliente']


class Producto(ModeloBaseGenerico):
	id_producto = models.AutoField(primary_key=True)
	estatus_producto = models.BooleanField("Estatus", default=True, 
										   choices=ESTATUS_GEN)
	codigo_producto = models.CharField("Código producto", max_length=7, null=True, blank=True)
	tipo_producto = models.CharField("Tipo producto", max_length=1, choices=TIPO_PRODUCTO_SERVICIO)
	id_familia = models.ForeignKey(ProductoFamilia, on_delete=models.PROTECT,
								   verbose_name="Familia")
	id_marca = models.ForeignKey(ProductoMarca, on_delete=models.PROTECT, 
								 verbose_name="Marca")
	id_modelo = models.ForeignKey(ProductoModelo, on_delete=models.PROTECT, 
								  verbose_name="Modelo")
	# cai = models.CharField("CAI", max_length=20, null=True, blank=True)  # CAI del producto
	id_cai = models.ForeignKey(ProductoCai, on_delete=models.PROTECT,
								null=True, blank=True, verbose_name="CAI")  # CAI del producto
	cai = models.CharField("Medida", max_length=21, null=True, blank=True)  # CAI del producto
	medida = models.CharField("Medida", max_length=15)  # Medida del producto
	segmento = models.CharField("Segmento", max_length=3)  # Segmento del producto
	nombre_producto = models.CharField("Nombre producto", max_length=50)  # Nombre del producto
	unidad = models.IntegerField("Unidad", null=True, blank=True, default=0)
	fecha_fabricacion = models.CharField("Fecha fabricación", max_length=6, 
									null=True, blank=True)  # Fecha de fabricación
	costo = models.DecimalField("Costo", max_digits=15, decimal_places=2,
							default=0.00, null=True, blank=True)  # Costo del producto
	alicuota_iva = models.DecimalField("Alícuota IVA", max_digits=4, 
									   decimal_places=2, default=0.00,
									   null=True, blank=True)  # Alicuota IVA
	
	id_alicuota_iva = models.ForeignKey(AlicuotaIva, on_delete=models.PROTECT, verbose_name="Alíc. IVA", default=1)
	
	precio = models.DecimalField("Precio", max_digits=15, decimal_places=2,
							default=0.00, null=True, blank=True)  # Precio del producto
	stock = models.IntegerField("Stock", null=True, blank=True)  # Stock disponible
	minimo = models.IntegerField("Stock mínimo", null=True, default=0)  # Stock mínimo
	descuento = models.DecimalField("Descuento", max_digits=4, 
								 decimal_places=2, default=0.00,
								 null=True, blank=True)  # Descuento aplicable
	despacho_1 = models.CharField("Despacho 1", max_length=16, 
							   null=True, blank=True)  # Dirección de despacho 1
	despacho_2 = models.CharField("Despacho 2", max_length=16, 
							   null=True, blank=True)  # Dirección de despacho 2
	descripcion_producto = models.CharField("Descripción", max_length=50)  # Descripción del producto
	carrito = models.BooleanField("Carrito")  # Indica si el producto está en el carrito
	
	def __str__(self):
		return self.nombre_producto
	
	def save(self, *args, **kwargs):
		
		#-- Identificar si el registro es nuevo antes de llamar a super().
		es_nuevo = self.pk is None
		
		#-- Llamar al método save original para que se guarde el registro y se asigne el ID.
		super().save(*args, **kwargs)
		
		#-- Si no tiene código, asigna el ID con ceros a la izquierda.
		if not self.codigo_producto:
			self.codigo_producto = f'{self.id_producto:07d}'  # 7 dígitos con ceros a la izquierda
			#-- Guarda nuevamente el registro con el código asignado.
			super(Producto, self).save(*args, **kwargs)	
		
		#-- Obtén todos los depósitos.
		depositos = ProductoDeposito.objects.all()
		
		#-- Registra un ProductoStock para cada depósito si tipo_producto es Producto.
		#-- Solo registrar en ProductoStock y ProductoMinimo si es nuevo y tipo_producto es "Producto"
		if es_nuevo and self.tipo_producto == 'p':
			for deposito in depositos:
				ProductoStock.objects.get_or_create(
					id_producto=self,             # Producto actual
					id_deposito=deposito,         # Depósito en la iteración
					defaults={
						'stock': self.stock or 0,           # Valor de stock de Producto o 0
						'minimo': self.minimo or 0,         # Valor de mínimo de Producto o 0
						'fecha_producto_stock': timezone.now()  # Fecha actual
					}
				)
			
				#-- Si cai tiene datos, registra un ProductoMinimo para cada depósito.
				if self.cai:
					ProductoMinimo.objects.get_or_create(
						id_producto=self,              # Producto actual
						cai=self.cai,                  # CAI del producto
						id_deposito=deposito,          # Depósito en la iteración
						defaults={
							'minimo': self.minimo or 0  # Valor de mínimo de Producto o 0
						}
					)
	
	def clean(self):
		super().clean()
		
		errors = {}
		
		fecha_fabricacion_str = str(self.fecha_fabricacion) if self.fecha_fabricacion else ""
		unidad_str = str(self.unidad) if self.unidad else ""
		costo_str = str(self.costo) if self.costo else ""
		descuento_str = str(self.descuento) if self.descuento else ""
		# dalicuota_iva_str = str(self.alicuota_iva) if self.alicuota_iva else ""
		
		# if not re.match(r'^\d{1,5}$', str(self.codigo_producto)):
		# 	errors.update({'codigo_producto': 'Debe indicar sólo dígitos numéricos positivos, mínimo 1 y máximo 5.'})
		
		if not re.match(r'^$|^20\d{2}(0[1-9]|1[0-2])$', fecha_fabricacion_str):
			errors.update({'fecha_fabricacion': 'Debe indicar el dato en el formato AAAAMM (AAAA para el año, MM para el mes). Indicar año y mes válidos. El año debe iniciar en 20'})
		
		if not re.match(r'^[1-9]\d{0,2}$|^0$|^$', unidad_str):
			errors.update({'unidad': 'El valor debe ser un número entero positivo, con hasta 3 dígitos, o estar en blanco o cero.'})
		
		if not re.match(r'^(0|[1-9]\d{0,13})(\.\d{1,2})?$|^$', costo_str):
			errors.update({'costo': 'El valor debe ser positivo, con hasta 13 dígitos enteros y hasta 2 decimales, o estar en blanco o cero.'})
		
		if not re.match(r'^(0|[1-9]\d{0,13})(\.\d{1,2})?$|^$', descuento_str):
			errors.update({'descuento': 'El valor debe ser positivo, con hasta 13 dígitos enteros y hasta 2 decimales, o estar en blanco o cero.'})
		
		# if not re.match(r'^(0|[1-9]\d{0,1})(\.\d{1,2})?$|^$', dalicuota_iva_str):
		# 	errors.update({'alicuota_iva': 'El valor debe ser positivo, con hasta 2 dígitos enteros y hasta 2 decimales, o estar en blanco o cero.'})
		
		#-- Valida que mínimo sea: 0.01 y hasta 99.99
		# if not re.match(r'^(0?[1-9]\.\d{2}|[1-9]\d\.\d{2}|0?0\.[1-9]\d|0?0\.0[1-9])$', str(self.alicuota_iva)):
		# 	errors.update({'alicuota_iva': 'El valor debe ser positivo, con hasta 2 dígitos enteros y hasta 2 decimales.'})
		
		if errors:
			raise ValidationError(errors)
	
	
	class Meta:
		db_table = 'producto'
		verbose_name = 'Producto'
		verbose_name_plural = 'Productos'
		ordering = ['nombre_producto']


class ProductoDeposito(ModeloBaseGenerico):
	id_producto_deposito = models.AutoField(primary_key=True)
	estatus_producto_deposito = models.BooleanField("Estatus", default=True,
													choices=ESTATUS_GEN)
	id_sucursal = models.ForeignKey('Sucursal', on_delete=models.CASCADE,
									verbose_name="Sucursal")
	nombre_producto_deposito = models.CharField("Nombre", max_length=50)
	
	def __str__(self):
		return self.nombre_producto_deposito
	
	class Meta:
		db_table = 'producto_deposito'
		verbose_name = 'Producto Depósito'
		verbose_name_plural = 'Producto Depósitos'
		ordering = ['nombre_producto_deposito']


class ProductoFamilia(ModeloBaseGenerico):
	id_producto_familia = models.AutoField(primary_key=True)
	estatus_producto_familia = models.BooleanField("Estatus", default=True,
												   choices=ESTATUS_GEN)
	nombre_producto_familia = models.CharField("Nombre", max_length=50)
	comision_operario = models.DecimalField("Comisión Operario(%)",
											max_digits=4, decimal_places=2,
										 	default=0.00, null=True, blank=True)
	info_michelin_auto = models.BooleanField("Info. Michelin auto", 
										  	 default=False)
	info_michelin_camion = models.BooleanField("Info. Michelin camión", 
											   default=False)
	
	def __str__(self):
		return self.nombre_producto_familia
	
	def clean(self):
		super().clean()
		
		errors = {}
		
		comision_operario_str = str(self.comision_operario) if self.comision_operario else ""
		
		if not re.match(r'^(0|[1-9]\d{0,1})(\.\d{1,2})?$|^$', comision_operario_str):
			errors.update({'comision_operario': 'El valor debe ser positivo, con hasta 2 dígitos enteros y hasta 2 decimales, o estar en blanco o cero.'})
		
		if errors:
			raise ValidationError(errors)
	
	
	class Meta:
		db_table = 'producto_familia'
		verbose_name = ('Familia de Producto')
		verbose_name_plural = ('Familias de Producto')
		ordering = ['nombre_producto_familia']


class Sucursal(ModeloBaseGenerico):
	id_sucursal = models.AutoField(primary_key=True)
	estatus_sucursal = models.BooleanField("Estatus", default=True,
										   choices=ESTATUS_GEN)
	nombre_sucursal = models.CharField("Nombre sucursal", max_length=50)
	codigo_michelin = models.IntegerField("Código Michelin")
	domicilio_sucursal = models.CharField("Domicilio", max_length=50)
	codigo_postal = models.CharField("Código Postal*", max_length=5)
	id_provincia = models.ForeignKey(Provincia, on_delete=models.PROTECT, 
								  verbose_name="Provincia")
	id_localidad = models.ForeignKey(Localidad, on_delete=models.PROTECT, 
								  verbose_name="Localidad")
	telefono_sucursal = models.CharField("Teléfono", max_length=15)
	email_sucursal = models.EmailField("Correo", max_length=50)
	inicio_actividad = models.DateField("Inicio actividad")
	
	
	def __str__(self):
		return self.nombre_sucursal

	def clean(self):
		super().clean()
		
		errors = {}
		
		codigo_michelin_str = str(self.codigo_michelin) if self.codigo_michelin else ""
		
		if not re.match(r'^\d{1,5}$', codigo_michelin_str):
			errors.update({'codigo_michelin': 'Debe indicar sólo dígitos numéricos positivos, mínimo 1 y máximo 5.'})
		
		if not re.match(r'^\+?\d[\d ]{0,14}$', str(self.telefono_sucursal)):
			errors.update({'telefono_sucursal': 'Debe indicar sólo dígitos numéricos positivos, mínimo 1 y máximo 15, el signo + y espacios.'})
		
		if errors:
			raise ValidationError(errors)
	
	
	class Meta:
		db_table = 'sucursal'
		verbose_name = ('Sucursal')
		verbose_name_plural = ('Sucursales')
		ordering = ['nombre_sucursal']


class PuntoVenta(ModeloBaseGenerico):
	id_punto_venta = models.AutoField(primary_key=True)
	estatus_punto_venta = models.BooleanField("Estatus", default=True,
											choices=ESTATUS_GEN)
	punto_venta = models.CharField("Punto de Venta", max_length=5, unique=True)
	descripcion_punto_venta = models.CharField("Descripción Pto. Venta", 
											max_length=50, null=True, 
											blank=True)
	
	def __str__(self):
		return self.punto_venta
	
	def clean(self):
		errors = {}
		
		#-- Limpiar y formatear el valor de `punto_venta` con ceros a la izquierda.
		if self.punto_venta:
			try:
				#-- Convertir a entero y luego a string para evitar ceros iniciales no deseados.
				self.punto_venta = str(int(self.punto_venta)).zfill(5)
			except ValueError:
				errors.update({'punto_venta': 'Debe ser un número entero positivo.'})
		
		#-- Validar el formato después de formatear el valor.
		if not re.match(r'^\d{5}$', self.punto_venta):
			errors.update({'punto_venta': 'Debe indicar un número de hasta 5 dígitos.'})
		
		if errors:
			raise ValidationError(errors)
		
		return super().clean()
	
	
	class Meta:
		db_table = 'punto_venta'
		verbose_name = 'Punto de Venta'
		verbose_name_plural = 'Puntos de Venta'
		ordering = ['punto_venta']


class Vendedor(ModeloBaseGenerico):
	id_vendedor = models.AutoField(primary_key=True)
	estatus_vendedor = models.BooleanField("Estatus", default=True, 
										   choices=ESTATUS_GEN)
	nombre_vendedor = models.CharField("Nombre vendedor", max_length=30)
	domicilio_vendedor = models.CharField("Domicilio", max_length=30)
	email_vendedor = models.EmailField("Correo", max_length=50)
	telefono_vendedor = models.CharField("Teléfono", max_length=15)
	
	pje_auto = models.DecimalField("% auto", max_digits=4, decimal_places=2, 
								null=True, blank=True, default=0.00)
	pje_camion = models.DecimalField("% camión", max_digits=4, decimal_places=2, 
								null=True, blank=True, default=0.00)
	
	vence_factura = models.IntegerField("Días vcto. Fact.", default=0, blank=True)
	vence_remito = models.IntegerField("Días vcto. Remito", default=0, blank=True)
	id_sucursal = models.ForeignKey(Sucursal, on_delete=models.CASCADE, 
									verbose_name="Sucursal")  # Relación con sucursal
	tipo_venta = models.CharField("Tipo", max_length=1, choices=TIPO_VENTA)
	col_descuento = models.IntegerField("Columna Dcto.", default=0, blank=True)
	email_venta = models.BooleanField("Enviar correos con Comprobantes", default=False)
	info_saldo = models.BooleanField("Mostrar Saldo en Correos Electrónicos", default=False)
	info_estadistica = models.BooleanField("Mostrar Saldos en Comp. Sin Estadísticas", default=False)
	
	def __str__(self):
		return self.nombre_vendedor
	
	def clean(self):
		super().clean()
		
		errors = {}
		
		pje_auto_str = str(self.pje_auto) if self.pje_auto is not None else ""
		pje_camion_str = str(self.pje_camion) if self.pje_camion is not None else ""
		vence_factura_str = str(self.vence_factura) if self.vence_factura is not None else ""
		vence_remito_str = str(self.vence_remito) if self.vence_remito is not None else ""
		col_descuento_str = str(self.col_descuento) if self.col_descuento is not None else ""
		
		if not re.match(r'^\+?\d[\d ]{0,14}$', str(self.telefono_vendedor)):
			errors.update({'telefono_vendedor': 'Debe indicar sólo dígitos numéricos positivos, mínimo 1 y máximo 15, el signo + y espacios.'})
		
		if not re.match(r'^(0|[1-9]\d{0,1})(\.\d{1,2})?$', pje_auto_str):
			errors.update({'pje_auto': 'El valor debe ser positivo, con hasta 2 dígitos enteros y hasta 2 decimales o cero.'})
		
		if not re.match(r'^(0|[1-9]\d{0,1})(\.\d{1,2})?$', pje_camion_str):
			errors.update({'pje_camion': 'El valor debe ser positivo, con hasta 2 dígitos enteros y hasta 2 decimales o cero.'})
		
		if not re.match(r'^[1-9]\d{0,2}$|^0$', vence_factura_str):
			errors.update({'vence_factura': 'El valor debe ser un número entero positivo, con hasta 3 dígitos o cero.'})
		
		if not re.match(r'^[1-9]\d{0,2}$|^0$', vence_remito_str):
			errors.update({'vence_remito': 'El valor debe ser un número entero positivo, con hasta 3 dígitos o cero.'})
		
		if not re.match(r'^[1-9]\d{0,2}$|^0$', col_descuento_str):
			errors.update({'col_descuento': 'El valor debe ser un número entero positivo, con hasta 3 dígitos o cero.'})
		
		if errors:
			raise ValidationError(errors)
	
	
	class Meta:
		db_table = 'vendedor'
		verbose_name = ('Vendedor')
		verbose_name_plural = ('Vendedores')
		ordering = ['nombre_vendedor']


class Operario(ModeloBaseGenerico):
	id_operario = models.AutoField(primary_key=True)
	estatus_operario = models.BooleanField("Estatus", default=True,
										   choices=ESTATUS_GEN)
	nombre_operario = models.CharField("Nombre", max_length=50)
	telefono_operario = models.CharField("Teléfono", max_length=15)
	email_operario = models.CharField("Correo", max_length=50)
	
	def __str__(self):
		return self.nombre_operario
	
	class Meta:
		db_table = 'operario'
		verbose_name = ('Operario')
		verbose_name_plural = ('Operarios')
		ordering = ['nombre_operario']


class MedioPago(ModeloBaseGenerico):
	id_medio_pago = models.AutoField(primary_key=True)
	estatus_medio_pago = models.BooleanField("Estatus", default=True,
										   choices=ESTATUS_GEN)
	nombre_medio_pago = models.CharField(max_length=30)
	condicion_medio_pago = models.IntegerField("Condición Pago", 
										  default=True,
										  choices=CONDICION_PAGO)
	plazo_medio_pago = models.IntegerField("Plazo medio de Pago")
	
	def __str__(self):
		return self.nombre_medio_pago
	
	@property
	def condicion_medio_pago_display(self):
		return self.get_condicion_medio_pago_display()
	
	
	class Meta:
		db_table = 'medio_pago'
		verbose_name = 'Medio de Pago'
		verbose_name_plural = 'Medios de Pago'
		ordering = ['nombre_medio_pago']
